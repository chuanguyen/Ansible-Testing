---

# {{ ansible_managed }}

version: "3.8"

services:
  {{ immich_server_container_name }}:
    container_name: "{{ immich_server_container_name }}"
    image: "{{ immich_server_image_base }}:{{ immich_image_base_tag }}"
    command: ["start.sh", "immich"]
    env_file: immich.env
    ports: []
    networks: []
    # Volumes store your data between container upgrades
    volumes:
{% for volume in immich_container_volumes.binds %}
      - {{ volume.source }}:{{ volume.target }}
{% endfor %}
    labels: []
    depends_on:
      - {{ immich_redis_container_name }}
      - {{ immich_postgres_container_name }}
      - {{ immich_typesense_container_name }}
    restart: "always"

  {{ immich_microservices_container_name }}:
    container_name: "{{ immich_microservices_container_name }}"
    image: "{{ immich_microservices_server_image_base }}:{{ immich_image_base_tag }}"
    command: ["start.sh", "immich"]
    env_file: immich.env
    ports: []
    networks: []
    # Volumes store your data between container upgrades
    volumes:
{% for volume in immich_container_volumes.binds %}
      - {{ volume.source }}:{{ volume.target }}
{% endfor %}
    labels: []
    depends_on:
      - {{ immich_redis_container_name }}
      - {{ immich_postgres_container_name }}
      - {{ immich_typesense_container_name }}
    restart: "always"

  {{ immich_machine_learning_container_name }}:
    container_name: "{{ immich_machine_learning_container_name }}"
    image: "{{ immich_machine_learning_image_base }}:{{ immich_image_base_tag }}"
    env_file: immich.env
    ports: []
    networks: []
    # Volumes store your data between container upgrades
    volumes:
      - model-cache:/cache
    labels: []
    restart: "always"

  {{ immich_web_container_name }}:
    container_name: "{{ immich_web_container_name }}"
    image: "{{ immich_web_image_base }}:{{ immich_image_base_tag }}"
    env_file: immich.env
    ports: []
    networks: []
    # Volumes store your data between container upgrades
    volumes: []
    labels: []
    restart: "always"

  {{ immich_typesense_container_name }}:
    container_name: "{{ immich_typesense_container_name }}"
    image: "{{ immich_typesense_image_base }}:{{ immich_typesense_image_base_tag }}"
    environment:
      - TYPESENSE_API_KEY=${TYPESENSE_API_KEY}
      - TYPESENSE_DATA_DIR=/data
    ports: []
    networks: []
    # Volumes store your data between container upgrades
    volumes:
      - tsdata:/data
    labels: []
    logging:
      driver: none
    restart: "always"

  {{ immich_redis_container_name }}:
    container_name: "{{ immich_redis_container_name }}"
    image: "{{ immich_redis_image_base }}:{{ immich_redis_image_base_tag }}"
    ports: []
    networks: []
    # Volumes store your data between container upgrades
    volumes: []
    labels: []
    restart: "always"

  {{ immich_postgres_container_name }}:
    container_name: "{{ immich_postgres_container_name }}"
    image: "{{ immich_postgres_image_base }}:{{ immich_postgres_image_base_tag }}"
    env_file: immich.env
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      PG_DATA: /var/lib/postgresql/data
    ports: []
    networks: []
    # Volumes store your data between container upgrades
    volumes:
      - pgdata:/var/lib/postgresql/data
    labels: []
    restart: "always"

  {{ immich_proxy_container_name }}:
    container_name: "{{ immich_proxy_container_name }}"
    image: "{{ immich_proxy_image_base }}:{{ immich_image_base_tag }}"
    environment:
      - IMMICH_SERVER_URL
      - IMMICH_WEB_URL
    ports: []
    networks:
      - {{ docker_networks.proxy.name }}
    # Volumes store your data between container upgrades
    volumes: []
    labels:
{% for traefik_label in immich_container_traefik_labels %}
      - "{{ traefik_label }}"
{% endfor %}
    depends_on:
      - {{ immich_server_container_name }}
      - {{ immich_web_container_name }}
    restart: "always"

networks:
  {{ docker_networks.proxy.name }}:
    external: true
volumes:
  pgdata:
  model-cache:
  tsdata:
