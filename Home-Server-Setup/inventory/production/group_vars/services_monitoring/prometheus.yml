---


### Prometheus
prometheus_scrape_configs:
  - job_name: "prometheus"
    static_configs:
      targets:
      # Expects hostnames, and will resolve to IP for Prometheus
      # dig Lookup ran in prometheus.yml template
        - hosts:
            - hostname: "localhost"
              port: "{{ prometheus_container_web_port }}"
    metrics_path: "/metrics"
    basic_auth:
      username: "{{ docker_services_admin_username }}"
      password: "{{ docker_services_admin_password }}"
    scrape_interval: "15s"
    scrape_timeout: "5s"
  - job_name: "node_exporters"
    static_configs:
      targets:
      # Expects hostnames, and will resolve to IP for Prometheus
      # dig Lookup ran in prometheus.yml template
        - hosts:
            - hostname: "rbp4-001.{{ home_lan_domain }}"
              port: "9100"
          labels:
            device_type: "rbp4"
    metrics_path: "/metrics"
    scrape_interval: "1m"
    scrape_timeout: "5s"
  - job_name: "snmp_printers"
    static_configs:
      targets:
      # Expects hostnames, and will resolve to IP for Prometheus
      # dig Lookup ran in prometheus.yml template
        - hosts:
            - hostname: "printer.{{ home_lan_domain }}"
              port: ""
          labels:
            device_type: "printer"
    metrics_path: "/snmp"
    params:
      module: "[PRINTER-MIB]"
    scrape_interval: "1m"
    scrape_timeout: "5s"
    relabel_configs:
      - source_labels: "[__address__]"
        target_label: "__param_target"
      - source_labels: "[__param_target]"
        target_label: "instance"
      - target_label: "__address__"
        replacement: "snmp_exporter:{{ snmp_exporter_container_web_port }}"

prometheus_alerting_alertmanagers:
  - timeout: ""
    path_prefix: ""
    scheme: ""
    static_configs:
      targets:
        - hosts:
            - hostname: "alertmanager"
              port: "9093"

prometheus_rule_files:
  - "alert.rules"

prometheus_alerting_groups:
  - group_name: "Node-Exporter-HW-Alerts"
    rules:
      - alert_name: "InstanceDown"
        expr: "up{{ '{' }}job='node_exporters'{{ '}' }} == 0"
        for: "5m"
        labels:
          severity: "critical"
          maintenance: "false"
        annotations:
          summary: "Instance {{ '{{ $labels.instance }}' }} down"
          description: "{{ '{{ $labels.instance }}' }} of job {{ '{{ $labels.job }}' }} has been down for more than 5 minutes."
          dashboard: "https://grafana.{{ home_lan_domain }}/d/rYdddlPWk/node-exporter-full?orgId=1"
  - group_name: "SNMP-Printers-Alerts"
    rules:
      - alert_name: "InstanceDown"
        expr: "up{{ '{' }}job='snmp_printers'{{ '}' }} == 0"
        for: "5m"
        labels:
          severity: "critical"
          maintenance: "false"
        annotations:
          summary: "Instance {{ '{{ $labels.instance }}' }} down"
          description: "{{ '{{ $labels.instance }}' }} of job {{ '{{ $labels.job }}' }} has been down for more than 5 minutes."
          dashboard: "https://grafana.{{ home_lan_domain }}/d/47ocflvnk/printers?orgId=1&viewPanel=4"


### Node_Exporter
prometheus_node_exporter_version: "1.2.2"

### SNMP
snmp_exporter_prometheus_mib_modules:
  - name: "PRINTER-MIB"
    walk:
      - "prtMarkerSuppliesLevel"
      - "prtMarkerSuppliesMaxCapacity"
      - "hrDeviceStatus"
      - "hrPrinterStatus"
    version: "2"
    max_repetitions: "25"
    retries: "3"
    timeout: "5s"
    auth:
      community: "{{ snmp_community_strings.printer }}"
    lookups:
      - source_indexes: [hrDeviceIndex]
        lookup: hrDeviceDescr
        drop_source_indexes: true

### AlertManager

# Default receiver
alertmanager_route_default_receiver: "default-receiver"
alertmanager_route_default_group_wait: "30s"
alertmanager_route_default_group_interval: "5m"
alertmanager_route_default_repeat_interval: "4h"

# List of notification receivers
alertmanager_receivers:
  - name: "default-receiver"
    email_configs:
      send_resolved: "true"
      to: "services+alertmanager@{{ home_lan_domain_public}}"
      from: "services+monitoring@{{ home_lan_domain_public }}"
      smarthost: "{{ smtp_monitoring_server_url }}"
      hello: ""
      auth_username: "apikey"
      auth_password: "{{ smtp_monitoring_api_key }}"
      auth_secret: ""
      auth_identity: ""
      require_tls: "false"
