system_packages:
- autofs
- build-essential
- cron
- ddclient
- fail2ban
- golang-go
- iperf3
- libdata-validate-ip-perl
- libsnmp
- net-tools
- p7zip-full
- unzip

fail2ban_ignoreip:
- "{{ home_lan_cidr }}"

docker_networks:
  proxy:
    name: "proxy"
    driver: "bridge"
    enable_ipv6: "false"
    scope: "local"
    internal: "false"
    external: "true"
    state: "present"
  monitoring:
    name: "monitoring"
    driver: "bridge"
    enable_ipv6: "false"
    scope: "local"
    internal: "false"
    external: "true"
    state: "present"

docker_user_root_dir: "/home/{{ ansible_user }}/docker"

ufw_rules:
  add:
    - comment: "Permits incoming SSH connections"
      rule: allow
      delete: no
      from_ip: any
      to_ip: any
      from_port: null
      to_port: '22'
      proto: tcp
    - comment: "Permits incoming HTTP connections"
      rule: allow
      delete: no
      from_ip: any
      to_ip: any
      from_port: null
      to_port: '80'
      proto: tcp
    - comment: "Permits incoming HTTPS connections"
      rule: allow
      delete: no
      from_ip: any
      to_ip: any
      from_port: null
      to_port: '443'
      proto: tcp
    - comment: "Permits incoming connections to PiHole management interface"
      rule: allow
      delete: no
      from_ip: "{{ home_lan_cidr }}"
      to_ip: any
      from_port: null
      to_port: '8080'
      proto: tcp
    - comment: "Permits incoming DHCP connections"
      rule: allow
      delete: no
      from_ip: any
      from_port: null
      to_ip: any
      to_port: '67'
      proto: udp
    - comment: "Permits incoming UDP DNS connections"
      rule: allow
      delete: no
      from_ip: any
      to_ip: any
      from_port: null
      to_port: '53'
      proto: udp
    - comment: "Permits incoming TCP DNS connections"
      rule: allow
      delete: no
      from_ip: any
      to_ip: any
      from_port: null
      to_port: '53'
      proto: tcp
    - comment: "Permits incoming TCP connections to iperf3"
      rule: allow
      delete: no
      from_ip: "{{ home_lan_cidr }}"
      to_ip: any
      from_port: null
      to_port: '5201'
      proto: tcp
    - comment: "Permits incoming UDP connections to iperf3"
      rule: allow
      delete: no
      from_ip: "{{ home_lan_cidr }}"
      to_ip: any
      from_port: null
      to_port: '5201'
      proto: udp
    - comment: "Permits incoming UDP Wireguard connections"
      rule: allow
      delete: no
      from_ip: any
      to_ip: any
      from_port: null
      to_port: '51820'
      proto: udp
    - comment: "Permits incoming SMTP connections"
      rule: allow
      delete: no
      from_ip: "{{ home_lan_cidr }}"
      to_ip: any
      from_port: null
      to_port: '25'
      proto: any
  remove:
    -

  prometheus_scrape_configs:
    - job_name: "snmp_printers"
      static_configs:
        targets:
        # Expects hostnames, and will resolve to IP for Prometheus
        # dig Lookup ran in prometheus.yml template
          - hosts:
              - "printer.{{ home_lan_domain }}"
            labels:
              device_type: "printer"
      metrics_path: "/snmp"
      params:
        module: "[PRINTER-MIB]"
      scrape_interval: "10s"
      scrape_timeout: "5s"
      relabel_configs:
        - source_labels: "[__address__]"
          target_label: "__param_target"
        - source_labels: "[__param_target]"
          target_label: "instance"
        - target_label: "__address__"
          replacement: "snmp_exporter:9116"

prometheus_mib_modules:
  - name: "PRINTER-MIB"
    walk:
      - "prtMarkerSuppliesLevel"
      - "prtMarkerSuppliesMaxCapacity"
    version: "2"
    max_repetitions: "25"
    retries: "3"
    timeout: "5s"
    auth:
      community: "{{ snmp_community_strings.printer }}"
    lookups:
      - source_indexes: [hrDeviceIndex]
        lookup: hrDeviceDescr
        drop_source_indexes: true
